import os
import json
from sqlconnec import *


def import_data():
    for root, dirs, files in os.walk("CVE Json/"):
        for name in files:
            if name.endswith((".json")):
                file_path = os.path.join(root, name)  # Get the current file path
                with open(file_path, "r", encoding="utf-8") as file:
                    json_data = file.read()

                data = json.loads(json_data)

                cve_id = data.get("cveMetadata", {}).get("cveId")
                author = data.get("cveMetadata", {}).get("assignerShortName")
                name = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("vendor")
                )
                vendor = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("vendor")
                )
                medium = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("product")
                )
                version = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("version")
                )
                description = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("descriptions", [{}])[0]
                    .get("value")
                )
                references = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("references", [{}])[0]
                    .get("url")
                )
                attack_vector = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("metrics", [{}])[0]
                    .get("cvssV3_1", {})
                    .get("attackVector")
                )
                complexity = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("attackComplexity")
                )
                priviledges = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("privilegesRequired")
                )
                user_interaction = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("userInteraction")
                )
                scope = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("scope")
                )
                confidentiality = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("confidentialityImpact")
                )
                integrity = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("integrityImpact")
                )
                availability = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("affected", [{}])[0]
                    .get("versions", [{}])[0]
                    .get("availabilityImpact")
                )
                cvss = (
                    data.get("containers", {})
                    .get("cna", {})
                    .get("metrics", [{}])[0]
                    .get("cvssV3_1", {})
                    .get("vectorString")
                )

                author = str(author)
                name = str(name)
                medium = str(medium)
                cve_os = str(vendor)
                version = str(version)
                cve_id = str(cve_id)
                description = str(description)
                references = str(references)
                attack_vector = str(attack_vector)
                complexity =str(complexity)
                priviledges = str(priviledges)
                user_interaction = str(user_interaction)
                scope = str(scope)
                confidentiality = str(confidentiality)
                integrity = str(integrity)
                availability = str(availability)
                cvss = str(cvss)

                connect()
                insert_to_appliance(name, medium, cve_os, version)
                insert_to_cveid(cve_id, name)
                insert_to_description(cve_id, description, references,0)
                insert_to_proof_of_exploit(cve_id,references,author ," Placeholder")
                insert_to_scores(cve_id, attack_vector, cvss)
                insert_to_sub_scores(cve_id, attack_vector,complexity,priviledges,user_interaction, scope, confidentiality, integrity, availability)
                print("Added:", file_path)
                # TODO: Implement sample data creator for other fields or modify .jsons
