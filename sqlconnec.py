import mysql.connector
from mysql.connector import Error

import os
from dotenv import load_dotenv

from contextlib import contextmanager

from printcolor import *

load_dotenv()


def connect():
    """Connect to MySQL database"""
    try:
        conn = mysql.connector.connect(
            host=os.getenv("DB_HOST"),
            database=os.getenv("DB_DATABASE"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
        )
        if conn.is_connected():
            return conn

    except Error as e:
        print_red(e)


@contextmanager
def get_db_connection():
    conn = connect()
    try:
        yield conn
    finally:
        conn.close()


def insert_to_appliance(conn, name, medium, os, version):
    """Insert data into the table"""
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO vulnerable_appliances (Name, Medium, OS, Version) VALUES (%s, %s, %s, %s)",
            (name, medium, os, version),
        )
        conn.commit()
        print_green("Inserted one entry into vulnerable_appliances successfully!")
    except Error as e:
        print_red("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()


def insert_to_cveid(conn, ID, name):
    """Insert data into the table"""
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO CVE_ID (ID, Name) VALUES (%s, %s)",
            (ID, name),
        )
        conn.commit()
        print_green("Inserted one entry into CVE_ID successfully!")
    except Error as e:
        print_red("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()


def insert_to_description(conn, ID, description, references, breaches):
    """Insert data into the table"""
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO Description (ID, text_description, recorded_references, recorded_breaches) VALUES (%s, %s, %s, %s)",
            (ID, description, references, breaches),
        )
        conn.commit()
        print_green("Inserted one entry into Description successfully!")
    except Error as e:
        print_red("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()


def insert_to_proof_of_exploit(conn, ID, demo, author, code):
    """Insert data into the table"""
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO Proof_Of_Exploit (ID, Exploit_demo, Author, Code_implementation) VALUES (%s, %s, %s, %s)",
            (ID, demo, author, code),
        )
        conn.commit()
        print_green("Inserted one entry into Proof_Of_Exploit successfully!")
    except Error as e:
        print_red("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()


def insert_to_scores(conn, ID, base_score, method, vector):
    """Insert data into the table"""
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO CVE_Scores (ID, Base_Score, Method_of_entry, Attack_Vector_v3) VALUES (%s, %s, %s, %s)",
            (ID, base_score, method, vector),
        )
        conn.commit()
        print_green("Inserted one entry into CVE_Scores successfully!")
    except Error as e:
        print_red("Error inserting into CVE Scores:", e)
    finally:
        if conn.is_connected():
            cursor.close()


def insert_to_sub_scores(
    conn,
    cve_id,
    Attack_Vector_v3,
    Attack_Complexity,
    Privilege_Required,
    User_Interaction,
    Scope,
    Confidentiality,
    Integrity,
    Availability,
):
    """Insert data into the table"""
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO Sub_Scores (ID, Attack_Vector_v3, Attack_Complexity, Privilege_Required, User_Interaction, Scope, Confidentiality, Integrity, Availability) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)",
            (
                cve_id,
                Attack_Vector_v3,
                Attack_Complexity,
                Privilege_Required,
                User_Interaction,
                Scope,
                Confidentiality,
                Integrity,
                Availability,
            ),
        )
        conn.commit()
        print_green("Inserted one entry into Sub_Scores successfully!")
    except Error as e:
        print_red("Error inserting into sub_scores: ", e)
    finally:
        if conn.is_connected():
            cursor.close()


def update_entry(conn, table, column, ID, update):
    cursor = conn.cursor()
    try:
        query = f"UPDATE {table} SET {column} = '{update}' WHERE ID = '{ID}'"
        cursor.execute(query)
        conn.commit()
        print_green("Update successful!\n")
    except Error as e:
        print_red("Error:", e)
    finally:
        cursor.close()
    return None
