import mysql.connector
from mysql.connector import Error

import os
from dotenv import load_dotenv

# Retrieve environment variables from .env file
load_dotenv()


def connect():
    """Connect to MySQL database"""
    try:
        conn = mysql.connector.connect(
            host=os.getenv("DB_HOST"),
            database=os.getenv("DB_DATABASE"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
        )
        if conn.is_connected():
            print("Connected to MySQL database")
            return conn

    except Error as e:
        # TODO: Better error handling
        print(e)


def insert_to_appliance(name, medium, os, version):
    """Insert data into the table"""
    conn = connect()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO vulnerable_appliances (Name, Medium, OS, Version) VALUES (%s, %s, %s, %s)",
            (name, medium, os, version),
        )
        conn.commit()
        print("Inserted one entry into vulnerable_appliances successfully!")
    except Error as e:
        # TODO: Better error handling
        print("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()

def insert_to_cveid(ID, name):
    """Insert data into the table"""
    conn = connect()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO CVE_ID (ID, Name) VALUES (%s, %s)",
            (ID, name),
        )
        conn.commit()
        print("Inserted one entry into CVE_ID successfully!")
    except Error as e:
        # TODO: Better error handling
        print("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("Connection closed.")

def insert_to_description(ID, description, references, breaches):
    """Insert data into the table"""
    conn = connect()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO description (ID, Description, References, Breaches) VALUES (%s, %s, %s, %d)",
            (ID, description, references, breaches),
        )
        conn.commit()
        print("Inserted one entry into Description successfully!")
    except Error as e:
        # TODO: Better error handling
        print("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("Connection closed.")

def insert_to_proof_of_exploit(ID, demo, author, code):
    """Insert data into the table"""
    conn = connect()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO proof_of_exploit (ID, Demo, Author, Code) VALUES (%s, %s, %s, %s)",
            (ID, demo, author, code),
        )
        conn.commit()
        print("Inserted one entry into Proof_Of_Exploit successfully!")
    except Error as e:
        # TODO: Better error handling
        print("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("Connection closed.")
def insert_to_scores(ID, method, vector):
    """Insert data into the table"""
    conn = connect()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO CVE_Scores (ID, Method, Vector) VALUES (%s, %s, %s)",
            (ID, method, vector),
        )
        conn.commit()
        print("Inserted one entry into CVE_Scores successfully!")
    except Error as e:
        # TODO: Better error handling
        print("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("Connection closed.")

def insert_to_sub_scores(att_vector, att_complexity, privileges, user_interaction, scope, confidentiality, integrity, availability):
    """Insert data into the table"""
    conn = connect()
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO Sub_Scores (Att_Vector, Att_Complexity, Privileges, User_Interaction, Scope, Confidentiality, Integrity, Availability) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
            (att_vector, att_complexity, privileges, user_interaction, scope, confidentiality, integrity, availability),
        )
        conn.commit()
        print("Inserted one entry into Sub_Scores successfully!")
    except Error as e:
        # TODO: Better error handling
        print("Error:", e)
    finally:
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("Connection closed.")



def main():
    name = "test"
    medium = "hardware"
    os = "linux"
    version = "12345"
    insert_to_appliance(name, medium, os, version)


if __name__ == "__main__":
    main()
